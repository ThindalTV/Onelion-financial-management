@page "/data-entry"
@page "/data-entry/{EntType}"

@using FinanMan.BlazorUi.Components.AccountSummaryComponents
@using FinanMan.BlazorUi.Components.DataEntryComponents
@using FinanMan.Database.Models.Tables;
@using FinanMan.Shared.General;
@using FinanMan.Shared.LookupModels;
@using FinanMan.Shared.ServiceInterfaces;

<div id="dataEntryPage" class="page-content">
    <header>
        <ul class="data-entry-tabs">
            <li><button type="button" class="tab-button invert@(_entryType == EntryType.Payments ? " active" : string.Empty)" @onclick="_ => HandleEntryTabClicked(EntryType.Payments)">@SharedLocalizer["Payments"]</button></li>
            <li><button type="button" class="tab-button invert@(_entryType == EntryType.Deposits ? " active" : string.Empty)" @onclick="_ => HandleEntryTabClicked(EntryType.Deposits)">@SharedLocalizer["Deposits"]</button></li>
            <li><button type="button" class="tab-button invert@(_entryType == EntryType.Transfers ? " active" : string.Empty)" @onclick="_ => HandleEntryTabClicked(EntryType.Transfers)">@SharedLocalizer["Transfers"]</button></li>
        </ul>
    </header>
    <section class="data-entry-section">
        <span class="title">@_entryType.GetDisplayText()</span>

        @switch (_entryType)
        {
            case EntryType.Deposits:
                <DepositEntry />
                break;
            case EntryType.Transfers:
                <TransferEntry />
                break;
            default:
                <PaymentEntry />
                break;
        }
    </section>
    <AccountSummary />
    <TransactionHistory />
    @*<button type="button" @onclick="HandleCreateLookupClicked">Hey look, a button!</button>*@
    @if(_newLookupItemResp?.WasError ?? false)
    {
        <p class="text-danger">
            Ya dun broke it!<br />
        </p>
        @_newLookupItemResp.RenderError
    }
</div>

@code {
    [Inject] private ILookupListService LookupListService { get; set; } = default!;
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;
    [Parameter]
    public string EntType
    {
        get => _entryType.ToString();
        set => _entryType = Enum.TryParse<EntryType>(value, out var et) ? et : EntryType.Payments;
    }
    private EntryType _entryType = EntryType.Payments;

    private ResponseModelBase<int>? _newLookupItemResp;


    private void HandleEntryTabClicked(EntryType entryType)
    {
        if (_entryType == entryType) { return; }
        NavigationManager.NavigateTo($"data-entry/{entryType}");
    }

    //private async Task HandleCreateLookupClicked()
    //{
    //    _newLookupItemResp = await LookupListService.UpdateLookupItem(
    //        new PayeeViewModel()
    //        {
    //            Id = 4,
    //            DisplayText = "Internet Service Provider",
    //            SortOrder = 4,
    //            Deleted = true
    //        }
    //    );
    //    await InvokeAsync(StateHasChanged);
    //}
}